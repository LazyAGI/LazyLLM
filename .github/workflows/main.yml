name: LazyLLM ci
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".git*"
      - "docs/assets/**"
      - "docs/**"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".git*"
      - "docs/assets/**"
      - "docs/**"
env:
  CI_PATH: '/home/mnt/platform_ci/GitHub/${{ github.repository }}/${{ github.run_number }}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Clone:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.pull_request.title, '[skip ci]')
    runs-on: tps_sco_nv
    steps:
      - name: Check for required label
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking for 'lint_pass' label..."
          TIMEOUT=360
          FIRST_WAIT=40
          INTERVAL=20
          ELAPSED_TIME=0
          WAIT_TIME=$FIRST_WAIT
          while [ $ELAPSED_TIME -lt $TIMEOUT ]; do
            echo $ELAPSED_TIME
            PR_LABELS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/labels" | \
              jq -r '.[].name')

            if echo "$PR_LABELS" | grep -q 'lint_pass'; then
              echo "'lint_pass' label found, proceeding with CI process."
              break
            fi

            echo "Label not found, waiting $WAIT_TIME seconds..."
            sleep $WAIT_TIME
            ELAPSED_TIME=$((ELAPSED_TIME + WAIT_TIME))
            
            WAIT_TIME=$INTERVAL
          done

          if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
            echo "The 'lint_pass' label was not added within $TIMEOUT seconds. Skipping CI process."
            exit 1
          fi
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build doc
        run: |
          set -e
          pip install -r requirements.txt
          pip install -r docs/requirements.txt
          python docs/add_docstrings.py

      - name: Create custom directory
        run: |
          set -ex
          echo ${{ env.CI_PATH }}
          mkdir -p ${{ env.CI_PATH }}

      - name: Clean custom directory
        run: |
          set -ex
          if [ -d "${{ env.CI_PATH }}" ]; then
            rm -rf ${{ env.CI_PATH }}/*
          fi

      - name: Move code to custom directory
        run: |
          set -ex
          mv $GITHUB_WORKSPACE/* ${{ env.CI_PATH }}/

  BasicTests:
    runs-on: tps_sco_nv
    needs: [Clone]
    steps:
      - name: RunTests
        run: |
          set -ex
          cd ${{ env.CI_PATH }}
          pip install -r tests/requirements.txt
          realpath .
          env | grep '^SCC'
          export LAZYLLM_SCO_ENV_NAME=lazyllm
          export LAZYLLM_DEFAULT_LAUNCHER=sco
          export PYTHONPATH=$PWD:$PYTHONPATH
          export LAZYLLM_DATA_PATH=/mnt/lustre/share_data/lazyllm/data/
          export LAZYLLM_MODEL_PATH=/mnt/lustre/share_data/lazyllm/models
          export LAZYLLM_HOME="${{ env.CI_PATH }}/${{ github.run_id }}-${{ github.job }}"
          mkdir -p $LAZYLLM_HOME
          source ~/ENV/env.sh
          python -m pytest --lf --last-failed-no-failures=all -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/basic_tests/

  AdvancedStandardTests:
    runs-on: tps_sco_nv
    needs: [Clone]
    steps:
      - name: RunTests
        run: |
          cd ${{ env.CI_PATH }}
          pip install -r tests/requirements.txt
          env | grep '^SCC'
          export LAZYLLM_SCO_ENV_NAME=lazyllm
          export LAZYLLM_DEFAULT_LAUNCHER=sco
          export PYTHONPATH=$PWD:$PYTHONPATH
          export LAZYLLM_DATA_PATH=/mnt/lustre/share_data/lazyllm/data/
          export LAZYLLM_MODEL_PATH=/mnt/lustre/share_data/lazyllm/models
          export LAZYLLM_HOME="${{ env.CI_PATH }}/${{ github.run_id }}-${{ github.job }}"
          mkdir -p $LAZYLLM_HOME
          source ~/ENV/env.sh
          if [ -f tests/advanced_tests/standard_test/.pytest-cache/v/cache/lastfailed ]; then
            python -m pytest --lf --last-failed-no-failures=none -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/advanced_tests/standard_test/
          else
            python -m pytest -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/advanced_tests/standard_test/
          fi

  AdvancedFullTests:
    runs-on: tps_sco_nv
    needs: [Clone]
    steps:
      - name: RunTests
        run: |
          cd ${{ env.CI_PATH }}
          env | grep '^SCC'
          export LAZYLLM_SCO_ENV_NAME=lazyllm
          export LAZYLLM_DEFAULT_LAUNCHER=sco
          export PYTHONPATH=$PWD:$PYTHONPATH
          export LAZYLLM_DATA_PATH=/mnt/lustre/share_data/lazyllm/data/
          export LAZYLLM_MODEL_PATH=/mnt/lustre/share_data/lazyllm/models
          export LAZYLLM_HOME="${{ env.CI_PATH }}/${{ github.run_id }}-${{ github.job }}"
          mkdir -p $LAZYLLM_HOME
          source ~/ENV/env.sh
          if [ -f tests/advanced_tests/full_test/.pytest-cache/v/cache/lastfailed ]; then
            python -m pytest --lf --last-failed-no-failures=none -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/advanced_tests/full_test/
          else
            python -m pytest -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/advanced_tests/full_test/
          fi

  ChargeTests:
    runs-on: tps_sco_nv
    needs: [ Clone ]
    steps:
      - name: Clone LazyLLM-Cache for Output and Cache
        run: |
          cd ${{ env.CI_PATH }}
          if [ ! -d "github_cache" ]; then
            git clone https://github.com/LazyAGI/LazyLLM-Cache.git github_cache
            echo "Repository cloned successfully"
          else
            echo "github_cache folder already exists, skipping clone"
            cd github_cache
            if [ -z "$(git status --porcelain)" ]; then
                echo "Repository is clean, pulling latest changes..."
                git pull origin main
                echo "Repository updated successfully"
            else
                echo "Repository has uncommitted changes, skipping update"
                echo "Current status:"
                git status --short
            fi
            cd ..
          fi
          ls -alh github_cache
          echo "LAZYLLM_TEMP_DIR=github_cache/output" >> $GITHUB_ENV
          echo "LAZYLLM_CACHE_DIR=github_cache/paid_llm_cache" >> $GITHUB_ENV

      - name: Set Cache Mode Based on Run Context
        run: |
          echo "GITHUB_RUN_ATTEMPT=$GITHUB_RUN_ATTEMPT"
          echo "LAZYLLM_CACHE_ONLINE_MODULE=True" >> $GITHUB_ENV
          echo "LAZYLLM_CACHE_STRATEGY=sqlite" >> $GITHUB_ENV
          if [ "$GITHUB_RUN_ATTEMPT" = "1" ] && [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "This is the first run, and push to main branch."
            echo "LAZYLLM_CACHE_MODE=RW" >> $GITHUB_ENV
          elif [ "$GITHUB_RUN_ATTEMPT" != "1" ] && [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "This is a re-run! (GITHUB_RUN_ATTEMPT=$GITHUB_RUN_ATTEMPT), and push to main branch."
            echo "LAZYLLM_CACHE_MODE=WO" >> $GITHUB_ENV
          elif [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "This is a pull request from other branch to main."
            echo "LAZYLLM_CACHE_MODE=RO" >> $GITHUB_ENV
          fi

      - name: Show ENV
        run: |
          echo "LAZYLLM_TEMP_DIR: $LAZYLLM_TEMP_DIR"
          echo "LAZYLLM_CACHE_DIR: $LAZYLLM_CACHE_DIR"
          echo "LAZYLLM_CACHE_MODE: $LAZYLLM_CACHE_MODE"
          echo "LAZYLLM_CACHE_STRATEGY: $LAZYLLM_CACHE_STRATEGY"
          echo "LAZYLLM_CACHE_ONLINE_MODULE: $LAZYLLM_CACHE_ONLINE_MODULE"

      - name: RunTests
        id: exe_ci
        run: |
          cd ${{ env.CI_PATH }}
          pip install -r tests/requirements.txt
          export PYTHONPATH=$PWD:$PYTHONPATH
          export LAZYLLM_DATA_PATH=/mnt/lustre/share_data/lazyllm/data/
          export LAZYLLM_MODEL_PATH=/mnt/lustre/share_data/lazyllm/models
          export LAZYLLM_HOME="${{ env.CI_PATH }}/${{ github.run_id }}-${{ github.job }}"
          mkdir -p $LAZYLLM_HOME
          source ~/ENV/env.sh
          if [ -f tests/charge_tests/.pytest-cache/v/cache/lastfailed ]; then
            python -m pytest --lf --last-failed-no-failures=none -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/charge_tests
          else
            python -m pytest -m "not skip_on_linux" --durations=0 --reruns=2 -v --cov=lazyllm --cov-append --cov-report=html tests/charge_tests
          fi

      - name: Success On Main Branch
        if: ${{ success() && steps.exe_ci.conclusion == 'success' && github.event_name == 'push' }}
        run: |
          cd ${{ env.CI_PATH }}
          cd github_cache
          ls -alh .
          if [ -n "$(git status --porcelain)" ]; then
            echo "Detected file changes, committing to main branch..."
            git add .
            git commit -m "ci: auto-commit workflow changes [skip ci]"
            git push origin main
            echo "Changes successfully committed to main branch"
          else
            echo "No file changes detected, no commit needed"
          fi

  Coverage_linux:
    runs-on: ubuntu-latest
    needs: [ BasicTests, AdvancedStandardTests, AdvancedFullTests, ChargeTests ]
    steps:
      - name: Add Coverage Report Link to Summary
        run: |
          echo "## 代码覆盖率报告" >> $GITHUB_STEP_SUMMARY
          echo "分支： ${GITHUB_REF}" >> $GITHUB_STEP_SUMMARY
          echo "提交 SHA： ${GITHUB_SHA}" >> $GITHUB_STEP_SUMMARY
          echo "您可以通过以下链接查看详细报告：" >> $GITHUB_STEP_SUMMARY
          echo "[http://10.210.0.49:8088/${GITHUB_RUN_NUMBER}/htmlcov](http://10.210.0.49:8088/${GITHUB_RUN_NUMBER}/htmlcov)" >> $GITHUB_STEP_SUMMARY

  DocCheck:
    runs-on: tps_sco_nv
    needs: [ Clone ]
    steps:
      - name: RunTests
        run: |
          cd ${{ env.CI_PATH }}
          pip install -r tests/requirements.txt
          export PYTHONPATH=$PWD:$PYTHONPATH
          export LAZYLLM_DATA_PATH=/mnt/lustre/share_data/lazyllm/data/
          export LAZYLLM_MODEL_PATH=/mnt/lustre/share_data/lazyllm/models
          export LAZYLLM_HOME="${{ env.CI_PATH }}/${{ github.run_id }}-${{ github.job }}"
          mkdir -p $LAZYLLM_HOME
          source ~/ENV/env.sh
          python -m pytest --lf --last-failed-no-failures=all --durations=0 --reruns=2 -v tests/doc_check
